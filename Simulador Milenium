<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <title>Simulador de Crédito Inmobiliario - MXN (Versión Avanzada)</title>
  
  <!-- -----------------
       CSS Embebido
  ----------------- -->
  <style>
    /* -------------------------------------------------------
       VARIABLES DE COLORES
    --------------------------------------------------------*/
    :root {
      --primary-color: #003366;
      --secondary-color: #007bff;
      --light-gray: #f5f5f5;
      --text-color: #333;
      --white: #ffffff;
      --dark-bg: #1a1a1a;
      --dark-text: #ccc;
    }

    /* RESETEO BÁSICO */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: Arial, sans-serif;
    }

    body {
      background: var(--light-gray);
      transition: background 0.4s ease, color 0.4s ease;
    }

    body.dark-mode {
      background: var(--dark-bg);
      color: var(--dark-text);
    }

    /* ENCABEZADO */
    header {
      background: var(--primary-color);
      color: var(--white);
      padding: 1rem;
      text-align: center;
      transition: background 0.4s ease;
      position: relative;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
    }

    header h1 {
      margin: 0;
      font-size: 1.8rem;
    }

    /* LOGO */
    .logo {
      width: 80px;
      height: auto;
      margin-right: 1rem;
    }

    /* CONTENEDOR PRINCIPAL */
    .container {
      max-width: 800px;
      margin: 2rem auto;
      background: var(--white);
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      transition: background 0.4s ease, color 0.4s ease;
    }

    body.dark-mode .container {
      background: #2a2a2a;
      color: var(--dark-text);
    }

    .container h2 {
      margin-bottom: 1rem;
    }

    .container p {
      margin-bottom: 1.5rem;
    }

    /* GRID PARA FORMULARIO */
    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    @media (max-width: 600px) {
      .form-grid {
        display: block;
      }
    }

    .form-group {
      display: flex;
      flex-direction: column;
      transition: color 0.4s ease;
    }

    .form-group label {
      margin-bottom: 0.5rem;
      font-weight: bold;
    }

    .form-group input,
    .form-group select {
      padding: 0.7rem;
      border: 1px solid #ccc;
      border-radius: 4px;
      outline: none;
      font-size: 1rem;
      transition: background 0.3s ease, color 0.3s ease;
    }

    body.dark-mode .form-group input,
    body.dark-mode .form-group select {
      background: #3a3a3a;
      color: var(--white);
      border: 1px solid #555;
    }

    .form-group input:focus,
    .form-group select:focus {
      border-color: var(--secondary-color);
    }

    /* BOTONES */
    .btn {
      display: inline-block;
      background: var(--secondary-color);
      color: var(--white);
      border: none;
      padding: 0.8rem 1.5rem;
      border-radius: 4px;
      font-size: 1rem;
      cursor: pointer;
      transition: background 0.3s ease;
      margin-top: 1rem;
      margin-right: 0.5rem;
    }

    .btn:hover {
      background: #0056b3; /* Tono más oscuro */
    }

    /* SECCIÓN DE RESULTADOS */
    .results {
      margin-top: 2rem;
      padding: 1.5rem;
      background: #f1f1f1;
      border-radius: 4px;
      transition: background 0.4s ease, color 0.4s ease;
    }

    body.dark-mode .results {
      background: #3a3a3a;
    }

    .results h3 {
      margin-bottom: 1rem;
      font-size: 1.2rem;
    }

    .results p {
      margin: 0.5rem 0;
    }

    /* EFECTO DE TRANSICIÓN */
    #resultsSection,
    #amortSection {
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 0.4s ease, transform 0.4s ease;
    }

    #resultsSection.show,
    #amortSection.show {
      opacity: 1;
      transform: translateY(0);
    }

    /* TABLA DE AMORTIZACIÓN */
    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
      transition: background 0.4s ease, color 0.4s ease;
    }
    table th,
    table td {
      border: 1px solid #ccc;
      padding: 0.5rem;
      text-align: center;
      transition: background 0.4s ease, color 0.4s ease;
    }
    table th {
      background: #e6e6e6;
    }

    body.dark-mode table th {
      background: #555;
      color: var(--white);
    }

    body.dark-mode table td {
      background: #2a2a2a;
      color: var(--dark-text);
      border-color: #444;
    }

    /* CHART CONTAINER */
    .chart-container {
      margin-top: 2rem;
      text-align: center;
    }
    #chart {
      max-width: 100%;
      height: 300px;
    }

    /* RESPONSIVE */
    @media (max-width: 600px) {
      .container {
        margin: 1rem;
        padding: 1rem;
      }

      header h1 {
        font-size: 1.5rem;
      }
      table {
        font-size: 0.8rem;
      }
    }

    /* DISCLAIMER */
    .disclaimer {
      font-size: 0.85rem;
      color: #666;
      margin-top: 1rem;
      font-style: italic;
    }
  </style>

  <!-- Librerías externas: Chart.js y jsPDF (con autotable para la tabla) -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jspdf"></script>
  <script src="https://cdn.jsdelivr.net/npm/jspdf-autotable"></script>
</head>
<body>

  <!-- ENCABEZADO -->
  <header>
    <img 
      src="https://drive.google.com/uc?export=view&id=1NQ0AWtd__HVjTWs5BYy4vvSv_1dNp8fX" 
      alt="Logo" 
      class="logo"
    />
    <h1>Simulador de Crédito Inmobiliario (MXN) - Versión Avanzada</h1>
  </header>

  <!-- BOTÓN DE MODO OSCURO -->
  <div style="text-align: center; margin-top: 1rem;">
    <button class="btn" onclick="toggleDarkMode()">Cambiar modo</button>
  </div>

  <!-- CONTENEDOR PRINCIPAL -->
  <div class="container">
    <h2>Calcule su préstamo</h2>
    <p>
      Complete los siguientes campos para simular su crédito, seleccionar el
      desarrollo y modelo de vivienda, la institución financiera y generar la
      tabla de amortización con posibilidad de pago extra.
    </p>

    <!-- FORMULARIO EN GRID -->
    <div class="form-grid">
      <!-- Selección de Desarrollo -->
      <div class="form-group">
        <label for="developmentSelect">Desarrollo</label>
        <select id="developmentSelect" onchange="handleDevelopmentChange()">
          <option value="" disabled selected>Elige un desarrollo</option>
          <option value="alta">Alta California</option>
          <option value="vista">Vista California</option>
          <option value="bosques">Bosques California</option>
        </select>
      </div>

      <!-- Selección de Modelo -->
      <div class="form-group">
        <label for="modelSelect">Modelo</label>
        <select id="modelSelect" onchange="handleModelChange()" disabled>
          <option value="" disabled selected>Elige un modelo</option>
        </select>
      </div>

      <!-- Valor de la Propiedad -->
      <div class="form-group">
        <label for="propertyValue">Valor de la propiedad (MXN)</label>
        <input 
          type="number" 
          id="propertyValue" 
          placeholder="Ej. 2500000"
          oninput="validateFields()"
        />
      </div>

      <!-- Pago Inicial / Enganche -->
      <div class="form-group">
        <label for="downPayment">Pago inicial / Enganche (MXN)</label>
        <input 
          type="number" 
          id="downPayment" 
          placeholder="Ej. 500000"
          oninput="validateFields()"
        />
      </div>

      <!-- Plazo del crédito -->
      <div class="form-group">
        <label for="loanYears">Plazo del crédito (años)</label>
        <input 
          type="number" 
          id="loanYears" 
          placeholder="Ej. 20"
          oninput="validateFields()"
        />
      </div>

      <!-- Institución Financiera -->
      <div class="form-group">
        <label for="bankSelect">Institución Financiera</label>
        <select id="bankSelect" onchange="validateFields()">
          <option value="" disabled selected>Elige una institución</option>
          <option value="infonavit" data-rate="8.0">INFONAVIT ~ (3.76% - 10.45%)</option>
          <option value="fovissste" data-rate="9.55">FOVISSSTE ~ 9.55%</option>
          <option value="bbva" data-rate="8.85">BBVA ~ (8.85% - 12.2%)</option>
          <option value="santander" data-rate="8.85">Santander ~ (8.85% - 12.2%)</option>
        </select>
      </div>

      <!-- Pago Extra (Opcional) -->
      <div class="form-group">
        <label for="extraPayment">Pago extra mensual (MXN)</label>
        <input 
          type="number" 
          id="extraPayment" 
          placeholder="Ej. 2000"
          oninput="validateFields()"
        />
      </div>
    </div>

    <!-- Botones -->
    <button class="btn" id="calcBtn" onclick="calculateLoan()" disabled>Calcular crédito</button>
    <button class="btn" onclick="resetForm()">Limpiar campos</button>

    <!-- SECCIÓN DE RESULTADOS -->
    <div id="resultsSection" class="results" style="display: none;">
      <h3>Resultados de la Simulación</h3>
      <p id="bankName"></p>
      <p id="interestRate"></p>
      <p id="loanAmount"></p>
      <p id="monthlyPayment"></p>
      <p id="totalPayment"></p>
      <!-- Fecha de Simulación -->
      <p id="simulationDate" style="font-style: italic;"></p>

      <!-- BOTONES SECUNDARIOS -->
      <button class="btn" onclick="toggleAmortTable()">Ver/ocultar tabla de amortización</button>
      <button class="btn" onclick="generatePDF()">Descargar reporte en PDF</button>

      <!-- TABLA DE AMORTIZACIÓN -->
      <div id="amortSection" style="display: none; margin-top:1rem;">
        <h3>Tabla de Amortización</h3>
        <table id="amortizationTable">
          <thead>
            <tr>
              <th>Mes</th>
              <th>Fecha de Pago</th>
              <th>Pago Mensual (MXN)</th>
              <th>Pago extra (MXN)</th>
              <th>Pago a Intereses (MXN)</th>
              <th>Pago a Capital (MXN)</th>
              <th>Saldo Restante (MXN)</th>
            </tr>
          </thead>
          <tbody>
            <!-- Se llena dinámicamente en JS -->
          </tbody>
        </table>

        <!-- GRÁFICA -->
        <div class="chart-container">
          <canvas id="chart"></canvas>
        </div>
      </div>
    </div>

    <!-- DISCLAIMER -->
    <div class="disclaimer">
      *Nota: Los cálculos son referencias estimadas. Para condiciones exactas, consultar con la institución financiera.
    </div>
  </div>

  <!-- -----------------
       JavaScript Embebido
  ----------------- -->
  <script>
    // Mapeo de modelos por desarrollo (nombre y precio en MXN)
    const DEVELOPMENTS = {
      alta: [
        { name: \"Santa Clara\", price: 2050000 },
        { name: \"Santa Lucía\", price: 2450000 },
        { name: \"Santa Bárbara\", price: 3350000 }
      ],
      vista: [
        { name: \"Ventura PA\", price: 860000 },
        { name: \"Ventura PB\", price: 965000 },
        { name: \"Cambria\", price: 1450000 },
        { name: \"Catalina\", price: 1700000 }
      ],
      bosques: [
        { name: \"Roble A\", price: 5150000 },
        { name: \"Roble B\", price: 5150000 },
        { name: \"Secuoya\", price: 6250000 }
      ]
    };

    let amortData = [];
    let simulationDateStr = '';
    let simulationDateObj = null;

    /**
     * Alterna modo oscuro
     */
    function toggleDarkMode() {
      document.body.classList.toggle('dark-mode');
    }

    /**
     * Valida campos y habilita/deshabilita botón Calcular
     */
    function validateFields() {
      const propertyValue = parseFloat(document.getElementById('propertyValue').value);
      const downPayment = parseFloat(document.getElementById('downPayment').value);
      const loanYears = parseFloat(document.getElementById('loanYears').value);
      const bankSelect = document.getElementById('bankSelect');
      const selectedOption = bankSelect.options[bankSelect.selectedIndex];
      const extraPayment = parseFloat(document.getElementById('extraPayment').value);

      const calcBtn = document.getElementById('calcBtn');

      if (
        selectedOption && selectedOption.value &&
        !isNaN(propertyValue) && propertyValue > 0 &&
        !isNaN(downPayment) && downPayment >= 0 &&
        !isNaN(loanYears) && loanYears > 0 &&
        (isNaN(extraPayment) || extraPayment >= 0)
      ) {
        calcBtn.disabled = false;
      } else {
        calcBtn.disabled = true;
      }
    }

    /**
     * Manejo de cambio en el select de desarrollo
     */
    function handleDevelopmentChange() {
      const developmentSelect = document.getElementById('developmentSelect');
      const modelSelect = document.getElementById('modelSelect');
      const selectedDev = developmentSelect.value;

      // Reseteamos el select de modelos
      modelSelect.innerHTML = `<option value=\"\" disabled selected>Elige un modelo</option>`;

      if (selectedDev) {
        // Habilitamos el select de modelos
        modelSelect.disabled = false;

        // Cargamos los modelos de ese desarrollo
        const models = DEVELOPMENTS[selectedDev];
        models.forEach(m => {
          const option = document.createElement('option');
          option.value = m.price;
          option.textContent = m.name;
          modelSelect.appendChild(option);
        });
      } else {
        // Sin desarrollo, se deshabilita el select
        modelSelect.disabled = true;
      }
      validateFields();
    }

    /**
     * Manejo de cambio al seleccionar un modelo
     */
    function handleModelChange() {
      const modelSelect = document.getElementById('modelSelect');
      if (!modelSelect.value) return;

      // Tomamos el precio (value) y lo colocamos en propertyValue
      const price = parseFloat(modelSelect.value);
      document.getElementById('propertyValue').value = price.toString();

      validateFields();
    }

    /**
     * Resetea todo el formulario
     */
    function resetForm() {
      document.getElementById('developmentSelect').selectedIndex = 0;
      const modelSelect = document.getElementById('modelSelect');
      modelSelect.innerHTML = `<option value=\"\" disabled selected>Elige un modelo</option>`;
      modelSelect.disabled = true;

      document.getElementById('propertyValue').value = '';
      document.getElementById('downPayment').value = '';
      document.getElementById('loanYears').value = '';
      document.getElementById('bankSelect').selectedIndex = 0;
      document.getElementById('extraPayment').value = '';
      document.getElementById('calcBtn').disabled = true;

      document.getElementById('resultsSection').style.display = 'none';
      document.getElementById('amortSection').style.display = 'none';

      if (window.myChart) {
        window.myChart.destroy();
      }
      amortData = [];
    }

    /**
     * Calcula el préstamo
     */
    function calculateLoan() {
      const propertyValue = parseFloat(document.getElementById('propertyValue').value);
      const downPayment = parseFloat(document.getElementById('downPayment').value);
      const loanYears = parseFloat(document.getElementById('loanYears').value);
      const bankSelect = document.getElementById('bankSelect');
      const selectedOption = bankSelect.options[bankSelect.selectedIndex];
      let extraPayment = parseFloat(document.getElementById('extraPayment').value);

      if (isNaN(extraPayment) || extraPayment < 0) {
        extraPayment = 0;
      }

      if (!selectedOption || !selectedOption.value) {
        alert(\"Por favor, seleccione una institución financiera.\");
        return;
      }

      if (
        isNaN(propertyValue) || isNaN(downPayment) ||
        isNaN(loanYears) || propertyValue <= 0 || loanYears <= 0
      ) {
        alert(\"Por favor, llene todos los campos numéricos correctamente.\");
        return;
      }

      // Tasa de interés anual
      const annualInterestRate = parseFloat(selectedOption.getAttribute('data-rate'));

      // Monto a financiar
      const loanPrincipal = propertyValue - downPayment;
      if (loanPrincipal <= 0) {
        alert(\"El pago inicial no puede ser mayor o igual al valor de la propiedad.\");
        return;
      }

      // Cálculo de pago mensual base
      const monthlyInterestRate = annualInterestRate / 12 / 100;
      const numberOfMonths = loanYears * 12;

      let monthlyPayment;
      if (monthlyInterestRate === 0) {
        monthlyPayment = loanPrincipal / numberOfMonths;
      } else {
        monthlyPayment = loanPrincipal * (
          (monthlyInterestRate * Math.pow((1 + monthlyInterestRate), numberOfMonths)) /
          (Math.pow((1 + monthlyInterestRate), numberOfMonths) - 1)
        );
      }

      // Pago total sin extra
      const totalPaymentCalculated = monthlyPayment * numberOfMonths;

      // Mostramos resultados
      const resultsSection = document.getElementById('resultsSection');
      resultsSection.style.display = 'block';
      setTimeout(() => {
        resultsSection.classList.add('show');
      }, 100);

      document.getElementById('bankName').textContent =
        `Institución: ${selectedOption.text}`;
      document.getElementById('interestRate').textContent =
        `Tasa de interés anual: ${annualInterestRate}%`;
      document.getElementById('loanAmount').textContent =
        `Monto del crédito: MXN $${loanPrincipal.toLocaleString('es-MX')}`;
      document.getElementById('monthlyPayment').textContent =
        `Pago mensual aprox.: MXN $${(monthlyPayment + extraPayment).toFixed(2)}`;
      document.getElementById('totalPayment').textContent =
        `Pago total (aprox. sin extra): MXN $${totalPaymentCalculated.toFixed(2)}`;

      const now = new Date();
      simulationDateObj = now;
      simulationDateStr = now.toLocaleDateString('es-MX', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
      document.getElementById('simulationDate').textContent =
        `Fecha de simulación: ${simulationDateStr}`;

      // Generar la tabla de amortización
      amortData = generateAmortization(
        loanPrincipal,
        monthlyInterestRate,
        numberOfMonths,
        monthlyPayment,
        extraPayment
      );
    }

    /**
     * Genera la tabla de amortización (con pago extra)
     */
    function generateAmortization(
      principal, monthlyInterestRate, numMonths,
      monthlyPayment, extraPayment
    ) {
      let balance = principal;
      const paymentDate = new Date(simulationDateObj);
      const schedule = [];

      for (let month = 1; month <= numMonths; month++) {
        let interestPaid = balance * monthlyInterestRate;
        let capitalPaid = monthlyPayment - interestPaid;

        const totalPaidThisMonth = monthlyPayment + extraPayment;
        let capitalWithExtra = capitalPaid + extraPayment;

        if (capitalWithExtra > balance) {
          capitalWithExtra = balance;
        }

        balance -= capitalWithExtra;
        if (balance < 0) balance = 0;

        // Fecha de pago
        const currentPaymentDate = new Date(paymentDate);
        currentPaymentDate.setMonth(currentPaymentDate.getMonth() + (month - 1));
        const paymentDateStr = currentPaymentDate.toLocaleDateString('es-MX', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric'
        });

        schedule.push({
          month,
          paymentDateStr,
          monthlyPayment,
          extraPayment,
          interestPaid,
          capitalPaid: capitalWithExtra,
          remaining: balance
        });

        if (balance <= 0) {
          break;
        }
      }
      return schedule;
    }

    /**
     * Muestra / oculta la tabla
     */
    function toggleAmortTable() {
      const amortSection = document.getElementById('amortSection');
      if (amortSection.style.display === 'none') {
        amortSection.style.display = 'block';
        setTimeout(() => amortSection.classList.add('show'), 100);
        fillAmortizationTable();
        generateChart();
      } else {
        amortSection.classList.remove('show');
        setTimeout(() => {
          amortSection.style.display = 'none';
        }, 300);
      }
    }

    /**
     * Llena la tabla con amortData
     */
    function fillAmortizationTable() {
      const tableBody = document.querySelector('#amortizationTable tbody');
      tableBody.innerHTML = '';

      amortData.forEach(row => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${row.month}</td>
          <td>${row.paymentDateStr}</td>
          <td>$${row.monthlyPayment.toFixed(2)}</td>
          <td>$${row.extraPayment.toFixed(2)}</td>
          <td>$${row.interestPaid.toFixed(2)}</td>
          <td>$${row.capitalPaid.toFixed(2)}</td>
          <td>$${row.remaining.toFixed(2)}</td>
        `;
        tableBody.appendChild(tr);
      });
    }

    /**
     * Genera un gráfico (Chart.js) de Intereses vs Capital
     */
    function generateChart() {
      let totalInterest = 0;
      let totalCapital = 0;

      amortData.forEach(row => {
        totalInterest += row.interestPaid;
        totalCapital += row.capitalPaid;
      });

      const ctx = document.getElementById('chart').getContext('2d');

      if (window.myChart) {
        window.myChart.destroy();
      }

      window.myChart = new Chart(ctx, {
        type: 'pie',
        data: {
          labels: ['Intereses Totales', 'Capital Pagado'],
          datasets: [{
            data: [totalInterest, totalCapital],
            backgroundColor: ['#FF6384', '#36A2EB']
          }]
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              display: true,
              position: 'bottom'
            }
          }
        }
      });
    }

    /**
     * Genera un reporte PDF
     */
    function generatePDF() {
      const doc = new jsPDF({ unit: 'pt', format: 'letter' });
      const title = 'Reporte de Simulación de Crédito Inmobiliario';

      doc.setFontSize(14);
      doc.text(title, 40, 40);

      const bankName = document.getElementById('bankName').textContent;
      const interestRate = document.getElementById('interestRate').textContent;
      const loanAmount = document.getElementById('loanAmount').textContent;
      const monthlyPayment = document.getElementById('monthlyPayment').textContent;
      const totalPayment = document.getElementById('totalPayment').textContent;

      doc.setFontSize(12);
      doc.text(bankName, 40, 70);
      doc.text(interestRate, 40, 90);
      doc.text(loanAmount, 40, 110);
      doc.text(monthlyPayment, 40, 130);
      doc.text(totalPayment, 40, 150);
      doc.text(`Fecha de simulación: ${simulationDateStr}`, 40, 170);

      const tableColumns = [
        { header: 'Mes', dataKey: 'month' },
        { header: 'Fecha de Pago', dataKey: 'paymentDateStr' },
        { header: 'Pago Mensual (MXN)', dataKey: 'monthlyPayment' },
        { header: 'Pago extra (MXN)', dataKey: 'extraPayment' },
        { header: 'Pago Intereses (MXN)', dataKey: 'interestPaid' },
        { header: 'Pago Capital (MXN)', dataKey: 'capitalPaid' },
        { header: 'Saldo Restante (MXN)', dataKey: 'remaining' }
      ];

      const tableRows = amortData.map(row => ({
        month: row.month,
        paymentDateStr: row.paymentDateStr,
        monthlyPayment: row.monthlyPayment.toFixed(2),
        extraPayment: row.extraPayment.toFixed(2),
        interestPaid: row.interestPaid.toFixed(2),
        capitalPaid: row.capitalPaid.toFixed(2),
        remaining: row.remaining.toFixed(2)
      }));

      doc.autoTable({
        startY: 200,
        head: [tableColumns.map(c => c.header)],
        body: tableRows.map(r => tableColumns.map(c => r[c.dataKey])),
        theme: 'grid'
      });

      doc.save('SimulacionCredito.pdf');
    }
  </script>
</body>
</html>
